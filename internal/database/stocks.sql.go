// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: stocks.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStocks = `-- name: CreateStocks :one
INSERT INTO stocks (id,companyName, valuePerStock, quantity, ownerId,created_at,updated_at) VALUES($1,$2,$3,$4,$5,$6,$7)
RETURNING id, companyname, valueperstock, quantity, ownerid, created_at, updated_at
`

type CreateStocksParams struct {
	ID            uuid.UUID
	Companyname   string
	Valueperstock float64
	Quantity      int32
	Ownerid       uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) CreateStocks(ctx context.Context, arg CreateStocksParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, createStocks,
		arg.ID,
		arg.Companyname,
		arg.Valueperstock,
		arg.Quantity,
		arg.Ownerid,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.Valueperstock,
		&i.Quantity,
		&i.Ownerid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllStocks = `-- name: GetAllStocks :many
SELECT id, companyname, valueperstock, quantity, ownerid, created_at, updated_at FROM stocks
WHERE quantity > 0
`

func (q *Queries) GetAllStocks(ctx context.Context) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getAllStocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Companyname,
			&i.Valueperstock,
			&i.Quantity,
			&i.Ownerid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStock = `-- name: UpdateStock :one
UPDATE stocks
SET companyName = $1, valuePerStock = $2, quantity = $3
WHERE id = $4 AND ownerId = $5
RETURNING id, companyname, valueperstock, quantity, ownerid, created_at, updated_at
`

type UpdateStockParams struct {
	Companyname   string
	Valueperstock float64
	Quantity      int32
	ID            uuid.UUID
	Ownerid       uuid.UUID
}

func (q *Queries) UpdateStock(ctx context.Context, arg UpdateStockParams) (Stock, error) {
	row := q.db.QueryRowContext(ctx, updateStock,
		arg.Companyname,
		arg.Valueperstock,
		arg.Quantity,
		arg.ID,
		arg.Ownerid,
	)
	var i Stock
	err := row.Scan(
		&i.ID,
		&i.Companyname,
		&i.Valueperstock,
		&i.Quantity,
		&i.Ownerid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
