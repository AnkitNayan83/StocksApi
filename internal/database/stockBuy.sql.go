// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: stockBuy.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStockBuy = `-- name: CreateStockBuy :one
INSERT INTO stockBuy(id,userId,stockId,quantity,created_at,updated_at) VALUES($1,$2,$3,$4,$5,$6)
RETURNING id, userid, stockid, quantity, created_at, updated_at
`

type CreateStockBuyParams struct {
	ID        uuid.UUID
	Userid    uuid.UUID
	Stockid   uuid.UUID
	Quantity  int32
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateStockBuy(ctx context.Context, arg CreateStockBuyParams) (Stockbuy, error) {
	row := q.db.QueryRowContext(ctx, createStockBuy,
		arg.ID,
		arg.Userid,
		arg.Stockid,
		arg.Quantity,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Stockbuy
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Stockid,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStockQuantity = `-- name: UpdateStockQuantity :one
UPDATE stockBuy
SET quantity = quantity - $1, updated_at = CURRENT_TIMESTAMP
WHERE id = $2
RETURNING id, userid, stockid, quantity, created_at, updated_at
`

type UpdateStockQuantityParams struct {
	Quantity int32
	ID       uuid.UUID
}

func (q *Queries) UpdateStockQuantity(ctx context.Context, arg UpdateStockQuantityParams) (Stockbuy, error) {
	row := q.db.QueryRowContext(ctx, updateStockQuantity, arg.Quantity, arg.ID)
	var i Stockbuy
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Stockid,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
